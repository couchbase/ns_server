#!/usr/bin/env python
#
# @author Couchbase <info@couchbase.com>
# @copyright 2011-2019 Couchbase, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os
import sys
import getopt
import urllib2
import urllib
import json
from functools import reduce

valid_bucket_types = ["ephemeral", "membase", "memcached"]
valid_service_types = {"kv", "n1ql", "index", "fts", "cbas", "eventing"}


def usage():
    print "usage: \n\
            -n <number of nodes>\n\
            -T <services to run. kv if unspecified>\n\
               (eg: n0:kv,n1:index+n1ql+fts+eventing+cbas)\n\
            -s <memory size> (min 256) default: 256\n\
            -I <index memory size> default: 256\n\
            -t <bucket type> (ephemeral, membase, memcached)\n\
               default: membase\n\
            -S <storage backend> (couchstore, magma)\n\
               default: couchstore\n\
            -r <num replicas> (max 3) default: 1\n\
               (Only for ephemeral or membase buckets!)\n\
            -i (don't index replicas) default: replica index enabled\n\
            -p <networking protocol to use> (ipv4, ipv6) default: ipv4"


class PasswordManager(urllib2.HTTPPasswordMgr):
    def __init__(self, username, password):
        self.auth = (username, password)

    def find_user_password(self, realm, authuri):
        return self.auth


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "n:t:s:r:iT:S:I:p:",
                                   ["dont-rebalance", "afamily=",
                                    "enable-encryption"])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit()
    nodes = 0
    buckettype = "membase"
    storage_backend = "couchstore"
    memsize = 256
    indexmemsize = 256
    replicas = 1
    replica_index = True
    deploy = ['kv']
    do_rebalance = True
    protocol = "ipv6" if (os.getenv("IPV6", "false") == "true") else "ipv4"
    encryption = False

    for o, a in opts:
        if o == "-n":
            nodes = int(a)
        elif o == "-t":
            buckettype = a
        elif o == "-s":
            memsize = a
        elif o == "-I":
            indexmemsize = a
        elif o == "-r":
            replicas = a
        elif o == "-i":
            replica_index = False
        elif o == "-T":
            plan = a.replace(' ', '').split(',')

            if len(plan) == 1 and len(plan[0].split(':')) == 1:
                deploy = plan[0].split('+')
            else:
                plan = dict(e.split(':') for e in plan)
                deploy = dict([(k, v.split('+')) for k, v in plan.items()])
        elif o in ("-p", "--afamily"):
            if a not in ("ipv4", "ipv6"):
                assert False, "invalid address family"
            protocol = a
        elif o == "--enable-encryption":
            encryption = True
        elif o == "--dont-rebalance":
            do_rebalance = False
        elif o == "-S":
            if a not in ("couchstore", "magma"):
                assert False, "invalid storage backend"
            storage_backend = a
        else:
            usage()
            sys.exit()

    if isinstance(deploy, list):
        services = deploy
        deploy = dict(("n%d" % i, services[:]) for i in xrange(nodes))

    if "kv" not in deploy.get("n0", []):
        deploy["n0"] = deploy.get("n0", []) + ["kv"]

    if nodes == 0 or buckettype not in valid_bucket_types or \
            int(memsize) < 256 or int(replicas) > 3 or \
            not set(deploy.keys()) <= \
            set(["n" + str(i) for i in range(nodes)]) or \
            not set(reduce(lambda x, y: x + y, deploy.values(), [])) <= \
            valid_service_types:
        usage()
        sys.exit()

    password_mgr = PasswordManager("Administrator", "asdasd")
    handler = urllib2.HTTPBasicAuthHandler(password_mgr)
    o = urllib2.build_opener(handler)

    print "Connecting {0} nodes, bucket type {1}, mem size {2} " \
        "with {3} replica copies, password asdasd, "\
        "deployment plan {4}\n".format(
            nodes, buckettype, memsize, replicas, str(deploy))

    base_port = 9000

    addr = "127.0.0.1" if protocol == "ipv4" else "[::1]"
    services = deploy["n0"]
    print "Connecting node 0 with services {0}".format(str(services))

    info = json.loads(o.open("http://{0}:{1}/pools".format(
        addr, base_port)).read())
    community_edition = info['isEnterprise'] is not True

    net_opts = "afamily={0}".format(protocol) + \
               "&nodeEncryption={0}".format("on" if encryption else "off")
    o.open("http://{0}:{1}/node/controller/enableExternalListener".format(
           addr, base_port), net_opts)
    o.open("http://{0}:{1}/node/controller/setupNetConfig".format(
           addr, base_port), net_opts)
    o.open("http://{0}:{1}/node/controller/setupServices".format(
           addr, base_port),
           "services={0}".format(",".join(services))).read()
    o.open("http://{0}:{1}/pools/default".format(addr, base_port),
           "memoryQuota=" + str(memsize) +
           "&indexMemoryQuota=" + str(indexmemsize)).read()
    o.open("http://{0}:{1}/pools/default/buckets".format(addr, base_port),
           "name=default" +
           "&authType=sasl" +
           "&saslPassword=" +
           "&bucketType=" + buckettype +
           "&storageBackend=" + storage_backend +
           "&ramQuotaMB=" + str(memsize) +
           "&replicaNumber=" + str(replicas) +
           "&replicaIndex=" + bool_request_value(replica_index)).read()
    o.open("http://{0}:{1}/settings/web".format(addr, base_port),
           "port=SAME&username=Administrator&password=asdasd").read()

    for i in range(1, nodes):
        port = base_port + i
        services = deploy.get("n" + str(i), [])
        if not services:
            services = ["kv"]
        print "Connecting node {0} with services {1}".format(i, str(services))
        cluster_member_port = base_port if community_edition else \
            base_port + 10000
        o.open("http://{0}:{1}/node/controller/doJoinCluster".format(
               addr, port),
               "user=Administrator&password=asdasd&" +
               "clusterMemberHostIp={0}".format(addr) +
               "&clusterMemberPort={0}".format(cluster_member_port) +
               "&services={0}".format(",".join(services))).read()

    if do_rebalance:
        print "Getting node list"
        info = json.loads(o.open("http://{0}:{1}/nodeStatuses".format(
            addr, base_port)).read())

        print "Servers added, triggering rebalance."
        o.open("http://{0}:{1}/controller/rebalance".format(addr, base_port),
               urllib.urlencode(
            {'knownNodes': ",".join([info[k]['otpNode'] for k in info]),
             'ejectedNodes': ''})).read()


def bool_request_value(value):
    return "1" if value else "0"


if __name__ == '__main__':
    main()
