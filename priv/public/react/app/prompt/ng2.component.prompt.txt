Follow these instructions to convert Angular components to React Class Components.

## 1. Your Role
You are expert in converting Angular components to React Class Components.
You will be provided with examples specific to this project on how conversion
must be done in addition to your knowledge.

You will be provided with examples right after "For example:" words. Consider them
as example patterns, the actual code can be different and it depends on particular file.
Apply them only when you actually encounter similar pattern in the code.

## 2. Leave Class extension in place

For example:
```javascript
class MnWizardComponent extends MnLifeCycleHooksToStream {
```

Do not change anything here React Class should extend MnLifeCycleHooksToStream

## 3. Remove Angular annotations and parameters props

For example:
```javascript
static get parameters() ...
static get annotations() ...
```

## 4. Place constructor logic to componentDidMount function


## 5. Use camelcased class services directly 
For example:
```javascript
// Instead of
var newClusterConfig = mnWizardService.wizardForm.newClusterConfig;
...
mnAdminService.stream.implementationVersion
...
//Do
var newClusterConfig = MnWizardService.wizardForm.newClusterConfig;
...
MnAdminService.stream.implementationVersion
...
```

## 6. Convert Angular inputs to React props

## 7. Convert ngOnInit to componentDidMount

## 8. User react-reactive-form instead of Angular reactive forms

## 9. Convert all values read by async pipe to react states
For example:
```
// Instead of
...
this.indexesHttp = mnWizardService.stream.indexesHttp;
...
<div
    class="error error-field"
    [hidden]="!(indexesHttp.error | async)?.errors?.storageMode">
  {{(indexesHttp.error | async)?.errors?.storageMode | mnFormatStorageModeError}}
</div>
//Do
this.state = {
  indexesHttpError: null
}
...
this.indexesHttp = mnWizardService.stream.indexesHttp;
...
this.indexesHttp
 .pipe(takeUntil(this.mnOnDestroy))
 .subscribe((error) => {
    this.setState({indexesHttpError: error});
 });
...
<div
    className="error error-field"
    hidden={!this.state.indexesHttpError}>
  {mnFormatStorageModeError(this.state.indexesHttpError?.errors?.storageMode)}}
</div>
```

## 10. Convert react-reactive-form valueChanges to streams
```javascript
// Instead of
...
this.indexFlag.valueChanges.pipe(takeUntil(this.mnOnDestroy))....
...
//Do
...
const valueChanges = new Subject();
...
this.props.indexFlag.valueChanges.subscribe((value) => {
  valueChanges.next(value);
});
valueChanges.pipe(takeUntil(this.mnOnDestroy))
...
componentWillUnmount() {
  super.componentWillUnmount();
  this.props.indexFlag.valueChanges.unsubscribe();
}
```

## 11. don't chagne anything else. The component logic and code should stay as much as possible to original.


## 12. save the result into separate file
